/**
 * Скрипт для полной очистки проекта Android от всех временных файлов сборки.
 * 
 * Использование:
 * 1. В командной строке: ./gradlew -b clean.gradle cleanAll
 * 2. Или добавить apply from: 'clean.gradle' в root build.gradle 
 *    и запускать как ./gradlew cleanAll
 */

import org.gradle.api.tasks.Delete

// Задача для полной очистки проекта
task cleanAll(group: 'build', description: 'Deletes all build files, caches and local properties') {
    doLast {
        println '==================================================='
        println '= Performing DEEP CLEAN of the Android project    ='
        println '==================================================='
        
        // 1. Удаляем стандартные директории build
        cleanBuildDirs()
        
        // 2. Удаляем кэш Gradle
        cleanGradleCache()
        
        // 3. Удаляем кэши IDE
        cleanIdeCache()
        
        // 4. Удаляем локальные настройки
        cleanLocalSettings()
        
        println '==================================================='
        println '= DEEP CLEAN completed successfully               ='
        println '==================================================='
    }
}

def cleanBuildDirs() {
    println '-> Cleaning build directories'
    // Удаляем директорию build в корневом проекте
    try {
        delete rootProject.buildDir
        println "   - Deleted: ${rootProject.buildDir}"
    } catch (Exception e) {
        println "   ! Warning: Could not delete root build directory: ${e.message}"
    }
    
    // Удаляем директории build во всех подпроектах
    rootProject.subprojects.each { project ->
        try {
            delete project.buildDir
            println "   - Deleted: ${project.buildDir}"
        } catch (Exception e) {
            println "   ! Warning: Could not delete build directory for ${project.name}: ${e.message}"
        }
    }
    
    // Дополнительно можно удалить папки сгенерированных файлов в app модуле
    if (file("${rootProject.projectDir}/app/generated").exists()) {
        try {
            delete "${rootProject.projectDir}/app/generated"
            println "   - Deleted: ${rootProject.projectDir}/app/generated"
        } catch (Exception e) {
            println "   ! Warning: Could not delete generated files: ${e.message}"
        }
    }
}

def cleanGradleCache() {
    println '-> Cleaning Gradle cache'
    
    // Удаляем .gradle в корне проекта
    def gradleDir = file("${rootProject.projectDir}/.gradle")
    if (gradleDir.exists()) {
        try {
            // Пытаемся удалить только подкаталоги, которые не используются текущим процессом
            def safeToDelete = []
            def skipDirectories = ['8.10.2', 'buildOutputCleanup', 'workspace-id.txt.lock']
            
            gradleDir.eachFile { file ->
                // Пропускаем каталоги, которые могут использоваться текущим процессом
                if (!skipDirectories.contains(file.name) && file.name != 'daemon') {
                    safeToDelete << file
                }
            }
            
            // Удаляем безопасные файлы/каталоги
            safeToDelete.each { file ->
                if (file.isDirectory()) {
                    project.delete(file)
                } else {
                    file.delete()
                }
                println "   - Deleted: ${file.absolutePath}"
            }
            
            println "   * Note: Some .gradle files were skipped as they might be in use by the current process"
            println "   * To fully clean .gradle directory, run this script from a batch file that executes Gradle and then exits"
        } catch (Exception e) {
            println "   ! Warning: Could not fully clean Gradle cache: ${e.message}"
            println "   ! Some files might be locked by the running Gradle daemon"
            println "   ! For a complete cleanup, close Android Studio and delete .gradle manually"
        }
    }
    
    // Удаляем gradle-wrapper файлы (опционально)
    // Раскомментируйте, если хотите удалять и gradle wrapper тоже
    /*
    def gradleWrapperDir = file("${rootProject.projectDir}/gradle")
    if (gradleWrapperDir.exists()) {
        try {
            delete gradleWrapperDir
            println "   - Deleted: ${gradleWrapperDir}"
        } catch (Exception e) {
            println "   ! Warning: Could not delete gradle wrapper directory: ${e.message}"
        }
    }
    */
}

def cleanIdeCache() {
    println '-> Cleaning IDE cache and libraries'
    
    // Удаляем кэши Android Studio / IntelliJ IDEA
    def ideaCachesDir = file("${rootProject.projectDir}/.idea/caches")
    if (ideaCachesDir.exists()) {
        try {
            delete ideaCachesDir
            println "   - Deleted: ${ideaCachesDir}"
        } catch (Exception e) {
            println "   ! Warning: Could not delete IDE caches: ${e.message}"
        }
    }
    
    def ideaLibrariesDir = file("${rootProject.projectDir}/.idea/libraries")
    if (ideaLibrariesDir.exists()) {
        try {
            delete ideaLibrariesDir
            println "   - Deleted: ${ideaLibrariesDir}"
        } catch (Exception e) {
            println "   ! Warning: Could not delete IDE libraries: ${e.message}"
        }
    }
    
    def ideaBuildDir = file("${rootProject.projectDir}/.idea/build")
    if (ideaBuildDir.exists()) {
        try {
            delete ideaBuildDir
            println "   - Deleted: ${ideaBuildDir}"
        } catch (Exception e) {
            println "   ! Warning: Could not delete IDE build directory: ${e.message}"
        }
    }
    
    def ideaModulesDir = file("${rootProject.projectDir}/.idea/modules")
    if (ideaModulesDir.exists()) {
        try {
            delete ideaModulesDir
            println "   - Deleted: ${ideaModulesDir}"
        } catch (Exception e) {
            println "   ! Warning: Could not delete IDE modules directory: ${e.message}"
        }
    }
    
    // Удаляем файлы *.iml
    def rootImlFile = file("${rootProject.projectDir}/${rootProject.name}.iml")
    if (rootImlFile.exists()) {
        try {
            delete rootImlFile
            println "   - Deleted: ${rootImlFile}"
        } catch (Exception e) {
            println "   ! Warning: Could not delete root iml file: ${e.message}"
        }
    }
    
    rootProject.subprojects.each { project ->
        def imlFile = file("${project.projectDir}/${project.name}.iml")
        if (imlFile.exists()) {
            try {
                delete imlFile
                println "   - Deleted: ${imlFile}"
            } catch (Exception e) {
                println "   ! Warning: Could not delete iml file for ${project.name}: ${e.message}"
            }
        }
    }
}

def cleanLocalSettings() {
    println '-> Cleaning local settings'
    
    // Удаляем local.properties
    def localPropertiesFile = file("${rootProject.projectDir}/local.properties")
    if (localPropertiesFile.exists()) {
        try {
            delete localPropertiesFile
            println "   - Deleted: ${localPropertiesFile}"
        } catch (Exception e) {
            println "   ! Warning: Could not delete local.properties: ${e.message}"
        }
    }
    
    // Удаляем captures директорию
    def capturesDir = file("${rootProject.projectDir}/captures")
    if (capturesDir.exists()) {
        try {
            delete capturesDir
            println "   - Deleted: ${capturesDir}"
        } catch (Exception e) {
            println "   ! Warning: Could not delete captures directory: ${e.message}"
        }
    }
}

// Задача для очистки файлов сборки с интерактивным вводом (опасные операции)
task cleanAllInteractive(group: 'build', description: 'Interactive deep clean that asks for confirmation') {
    doLast {
        println '==================================================='
        println '= INTERACTIVE DEEP CLEAN of the Android project   ='
        println '==================================================='
        println '= WARNING: This task will delete ALL build files  ='
        println '= and caches. This operation cannot be undone!    ='
        println '==================================================='
        println ''
        
        def console = System.console()
        if (console != null) {
            def confirmation = console.readLine('> Proceed with deep clean? (y/N): ')
            if (confirmation.toLowerCase() == 'y') {
                cleanAll.execute()
            } else {
                println '> Deep clean cancelled by user'
            }
        } else {
            println '> Cannot get console. Running non-interactive mode...'
            cleanAll.execute()
        }
    }
}

// Добавляем cleanAll как зависимость для стандартной задачи clean
tasks.whenTaskAdded { task ->
    if (task.name == 'clean') {
        task.dependsOn cleanAll
    }
}

// Задача для создания отдельного скрипта очистки без использования Gradle
task generateFullCleanScript(group: 'build', description: 'Generates platform-specific scripts for full cleanup without Gradle') {
    doLast {
        println '==================================================='
        println '= Generating standalone cleanup scripts            ='
        println '==================================================='
        
        // Создаем Windows скрипт
        def winScript = file("${rootProject.projectDir}/full-clean.bat")
        winScript.text = '''@echo off
echo ===================================================
echo = FULL CLEANUP SCRIPT (NO GRADLE REQUIRED)        =
echo ===================================================
echo.
echo WARNING: This will delete ALL build files and caches!
echo Close Android Studio before continuing!
echo.
set /p continue=Continue (y/N)? 
if /i "%continue%" neq "y" goto :eof

echo.
echo Cleaning build directories...
if exist build rmdir /s /q build
for /d %%d in (*) do (
  if exist "%%d\\build" (
    echo   - Cleaning %%d\\build
    rmdir /s /q "%%d\\build"
  )
)

echo.
echo Cleaning .gradle directory...
if exist .gradle rmdir /s /q .gradle

echo.
echo Cleaning IDE cache...
if exist .idea\\caches rmdir /s /q .idea\\caches
if exist .idea\\libraries rmdir /s /q .idea\\libraries
if exist .idea\\modules rmdir /s /q .idea\\modules
if exist .idea\\build rmdir /s /q .idea\\build
del /f /q *.iml > nul 2>&1
for /d %%d in (*) do (
  del /f /q "%%d\\*.iml" > nul 2>&1
)

echo.
echo Cleaning local settings...
if exist local.properties del /f /q local.properties
if exist captures rmdir /s /q captures
if exist app\\generated rmdir /s /q app\\generated

echo.
echo ===================================================
echo = Cleanup completed!                              =
echo ===================================================
echo.
pause
'''
        println "   - Created Windows script: ${winScript.absolutePath}"
        
        // Создаем Unix скрипт
        def unixScript = file("${rootProject.projectDir}/full-clean.sh")
        unixScript.text = '''#!/bin/bash

echo "==================================================="
echo "= FULL CLEANUP SCRIPT (NO GRADLE REQUIRED)        ="
echo "==================================================="
echo
echo "WARNING: This will delete ALL build files and caches!"
echo "Close Android Studio before continuing!"
echo

read -p "Continue (y/N)? " continue
if [[ ! "$continue" =~ ^[Yy]$ ]]; then
    echo "Cleanup cancelled"
    exit 0
fi

echo
echo "Cleaning build directories..."
rm -rf build
for dir in */; do
    if [ -d "${dir}build" ]; then
        echo "  - Cleaning ${dir}build"
        rm -rf "${dir}build"
    fi
done

echo
echo "Cleaning .gradle directory..."
rm -rf .gradle

echo
echo "Cleaning IDE cache..."
rm -rf .idea/caches
rm -rf .idea/libraries
rm -rf .idea/modules
rm -rf .idea/build
find . -name "*.iml" -type f -delete

echo
echo "Cleaning local settings..."
rm -f local.properties
rm -rf captures
rm -rf app/generated

echo
echo "==================================================="
echo "= Cleanup completed!                              ="
echo "==================================================="
echo
'''
        unixScript.executable = true
        println "   - Created Unix script: ${unixScript.absolutePath}"
        
        println '==================================================='
        println '= Scripts generated successfully                  ='
        println '= Run them when Gradle and Android Studio are     ='
        println '= fully closed for complete cleanup               ='
        println '==================================================='
    }
} 